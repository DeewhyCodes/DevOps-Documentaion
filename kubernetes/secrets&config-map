# Config-maps & secrets

We can create ConfigMap & Secretes in the Cluster using command or also using yml files.

## Configmaps

_ConfigMaps:_
are used to passed non confidential information in key:value pair that weren't
hardcoded/included in the Dockerfiles/code by Developers

example
ConfigMap with file data

```yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: javawebappconfig
data:
  tomcat-users.xml: |
    <?xml version='1.0' encoding='utf-8'?>
      <tomcat-users xmlns="http://tomcat.apache.org/xml"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
                      version="1.0">
       <user username="devadmin" password="tomcat123" roles="admin-gui,manager-gui"/>
    </tomcat-users>
```

### Create ConfigMap Using Command:

```sh
kubectl create configmap springappconfig --from-literal=db-username=devdb
kubectl create configmap springappconfig --from-literal=db-hostname=mongosvc
```

### Create ConfigMap Using files/declarative approach

```yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: springappconfig
data:
  db-hostname: mongosvc
  db-username: devdb
  db-password: devdb123
```

---

## Secrets

_Secrets:_
are used to passed confidential information in base64 format such as
PASSWORD
SSH_PRIVATE_KEYS  
dockerHub LOGIN password  
tls certificate

### Secret Using Command:

```sh
kubectl create secret generic springappsecret --from-literal=mongodbpassword=devdb@123
```

### secret using yaml manifest file:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: springappsecret
type: Opaque
stringData: # We can define multiple key value pairs.
  mongodbpassword: devdb@123
```

### creating secret using command:

```sh
#create secret file
kubectl create secret docker-registry dockerhublogin \
  --docker-username=deewhydev \
  --docker-password=pass1234 \
  --docker-server=docker.io

#to see created secrets
kubectl get secret
kube
```

### pulling a docker image from a private registry using a secret file credentials

```yaml
#use the secret
apiVersion: v1
kind: Pod
metadata:
  name: webapp
  labels:
    app: web
spec:
  imagePullSecrets:
    - name: dockerhublogin
  containers:
    - name: webapp
      image: mylandmarktech/nodeapp
      ports:
        - containerPort: 9981
```

---

## application of config map and secrets together

```yaml
#without using config maps and secrets
kind: Deployment
apiVersion: apps/v1
metadata:
  name: springapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      labels:
        app: springapp
    spec:
      containers:
        - name: springapp
          image: mylandmarktech/spring-boot-mongo
          env:
            - name: MONGO_DB_HOSTNAME
              value: mongosvc
            - name: MONGO_DB_USERNAME
              value: devdb
            - name: MONGO_DB_PASSWORD
              value: devdb@123
```

```yaml
#using congfig maps and secrets
kind: ConfigMap
apiVersion: v1
metadata:
  name: springappconfig
data:
  db-hostname: mongosvc
  db-username: devdb
  db-password: devdb123
---
apiVersion: v1
kind: Secret
metadata:
  name: springappsecret
type: Opaque
stringData: # We can define multiple key value pairs.
  mongodbpassword: devdb@123
---
kind: ReplicaSet
apiVersion: apps/v1
metadata:
  name: mongors
spec:
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: springappconfig
                  key: db-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: springappsecret
                  key: mongodbpassword
          ports:
            - containerPort: 27017
```
