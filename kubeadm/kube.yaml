#microservices mainfest file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
  labels:
    app: springapp
spec:
  selector:
    matchLabels:
      app: springapp
  replicas: 4
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  minReadySeconds: 30
  template:
    metadata:
      labels:
        app: springapp
    spec:
      containers:
      - name: myspringapp
        image: mylandmarktech/spring-boot-mongo
        env:
        - name: MONGO_DB_HOSTNAME
          value: mongosvc
        - name: MONGO_DB_USERNAME
          value: victordev
        - name: MONGO_DB_PASSWORD
          value: deewhydev
        ports:
        - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: springappsvc
spec:
  selector:
    app: springapp
  type: NodePort
  ports:
  - name: springapptcp
    port: 80
    targetPort: 8080
    nodePort: 31200
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongors
  labels:
    app: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mymongo
        image: mongo
        ports:
        - name: db
          containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: victordev
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: deewhydev
---
kind: Service
apiVersion: v1
metadata:
  name: mongosvc
spec:
  selector:
    app: mongo
  type: ClusterIP
  ports:
  - name: db
    port: 27017
    targetPort: 27017

#microservices with NFS volumes
 app.yml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: springapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      labels:
        app: springapp
    spec:
      containers:
      - name: springapp
        image: mylandmarktech/spring-boot-mongo
        env:
        - name: MONGO_DB_HOSTNAME
          value: mongosvc
        - name: MONGO_DB_USERNAME
          value: victordev
        - name: MONGO_DB_PASSWORD
          value: deewhydev@123
        ports:
        - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: springappsvc
spec:
  selector:
    app: springapp
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 31400
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongors
  labels:
    app: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      volumes:
      - name: mongohostvol
        nfs:
          server: 54.147.29.25
          path: /mnt/share
      containers:
      - name: mymongo
        image: mongo
        volumeMounts:
        - name: mongohostvol
          mountPath: /data/db
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: victordev
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: deewhydev@123
---
kind: Service
apiVersion: v1
metadata:
  name: mongosvc
spec:
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017

---

#pv & pvc with nfs
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mypv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: manual
  nfs:
    path: /mnt/share
    server: 172.31.20.62
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mypvc
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
#now after creating the pv, and claiming the volume (pvc), we can attach the claimed in our pod
kind: Deployment
apiVersion: apps/v1
metadata:
  name: springapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      labels:
        app: springapp
    spec:
      containers:
      - name: springapp
        image: mylandmarktech/spring-boot-mongo
        env:
        - name: MONGO_DB_HOSTNAME
          value: mongosvc
        - name: MONGO_DB_USERNAME
          value: victordev
        - name: MONGO_DB_PASSWORD
          value: deewhydev@123
        ports:
        - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: springappsvc
spec:
  selector:
    app: springapp
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 31400
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongors
  labels:
    app: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      volumes:
      - name: mongopvc
        persistentVolumeClaim:
          claimName: mypvc
      containers:
      - name: mymongo
        image: mongo
        volumeMounts:
        - name: mongopvc
          mountPath: /data/db
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: victordev
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: deewhydev@123
---
kind: Service
apiVersion: v1
metadata:
  name: mongosvc
spec:
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017





